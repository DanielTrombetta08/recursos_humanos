import os
import streamlit as st
import uuid
import time
from utils import *
from dotenv import load_dotenv
load_dotenv()

# Para deploy, usar st.secrets ao inv√©s de .env
try:
    # Primeiro tenta st.secrets (deploy)
    groq_api_key = st.secrets["GROQ_API_KEY"]
except:
    # Se n√£o encontrar, usa .env (desenvolvimento local)
    groq_api_key = os.getenv("GROQ_API_KEY")

# Definir a vari√°vel para o Groq
os.environ["GROQ_API_KEY"] = groq_api_key

st.set_page_config(page_title="Triagem e An√°lise de Curr√≠culos", page_icon="üìÑ", layout="wide")

id_model = "deepseek-r1-distill-llama-70b"
temperature = 0.7
json_file = 'curriculos.json'
path_job_csv = "vagas.csv"

llm = load_llm(id_model, temperature)

job = {}
job['title'] = "Desenvolvedor(a) Full Stack"
job['description'] = "Estamos em busca de um(a) Desenvolvedor(a) Full Stack para integrar o time de tecnologia da nossa empresa, atuando em projetos estrat√©gicos com foco em solu√ß√µes escal√°veis e orientadas a dados. O(a) profissional ser√° respons√°vel por desenvolver, manter e evoluir aplica√ß√µes web robustas, al√©m de colaborar com times multidisciplinares para entregar valor cont√≠nuo ao neg√≥cio."
job['details'] = """
Atividades:
- Desenvolver e manter aplica√ß√µes web em ambientes modernos, utilizando tecnologias back-end e front-end.
- Trabalhar com equipes de produto, UX e dados para entender demandas e propor solu√ß√µes.
- Criar APIs, integra√ß√µes e dashboards interativos.
- Garantir boas pr√°ticas de versionamento, testes e documenta√ß√£o.
- Participar de revis√µes de c√≥digo, deploys e melhorias cont√≠nuas na arquitetura das aplica√ß√µes.
Pr√©-requisitos:
- S√≥lidos conhecimentos em Python, JavaScript e SQL.
- Experi√™ncia pr√°tica com frameworks como React, Node.js e Django.
- Familiaridade com versionamento de c√≥digo usando Git.
- Experi√™ncia com servi√ßos de nuvem, como AWS e Google Cloud Platform.
- Capacidade de trabalhar em equipe, com boa comunica√ß√£o e perfil colaborativo.
Diferenciais:
- Conhecimento em Power BI ou outras ferramentas de visualiza√ß√£o de dados.
- Experi√™ncia anterior em ambientes √°geis (Scrum, Kanban).
- Projetos pr√≥prios, contribui√ß√µes open source ou portf√≥lio t√©cnico dispon√≠vel.
- Certifica√ß√µes em nuvem ou √°reas relacionadas √† engenharia de software.
"""

schema = """
{
  "name": "Nome completo do candidato",
  "area": "√Årea ou setor principal que o candidato atua. Classifique em apenas uma: Desenvolvimento, Marketing, Vendas, Financeiro, Administrativo, Outros",
  "summary": "Resumo objetivo sobre o perfil profissional do candidato",
  "skills": ["compet√™ncia 1", "compet√™ncia 2", "..."],
  "education": "Resumo da forma√ß√£o acad√™mica mais relevante",
  "interview_questions": ["Pelo menos 3 perguntas √∫teis para entrevista com base no curr√≠culo, para esclarecer algum ponto ou explorar melhor"],
  "strengths": ["Pontos fortes e aspectos que indicam alinhamento com o perfil ou vaga desejada"],
  "areas_for_development": ["Pontos que indicam poss√≠veis lacunas, fragilidades ou necessidades de desenvolvimento"],
  "important_considerations": ["Observa√ß√µes espec√≠ficas que merecem verifica√ß√£o ou cuidado adicional"],
  "final_recommendations": "Resumo avaliativo final com sugest√µes de pr√≥ximos passos (ex: seguir com entrevista, indicar para outra vaga)",
  "score": 0.0
}
"""

fields = [
    "name",
    "area",
    "summary",
    "skills",
    "education",
    "interview_questions",
    "strengths",
    "areas_for_development",
    "important_considerations",
    "final_recommendations",
    "score"
]

prompt_score = """
Com base na vaga espec√≠fica, calcule a pontua√ß√£o final (de 0.0 a 10.0).
O retorno para esse campo deve conter apenas a pontua√ß√£o final (x.x) sem mais nenhum texto ou anota√ß√£o.
Seja justo e rigoroso ao atribuir as notas. A nota 10.0 s√≥ deve ser atribu√≠da para candidaturas que superem todas as expectativas da vaga.
Crit√©rios de avalia√ß√£o:
1. Experi√™ncia (Peso: 35% do total): An√°lise de posi√ß√µes anteriores, tempo de atua√ß√£o e similaridade com as responsabilidades da vaga.
2. Habilidades T√©cnicas (Peso: 25% do total): Verifique o alinhamento das habilidades t√©cnicas com os requisitos mencionados na vaga.
3. Educa√ß√£o (Peso: 15% do total): Avalie a relev√¢ncia da gradua√ß√£o/certifica√ß√µes para o cargo, incluindo institui√ß√µes e anos de estudo.
4. Pontos Fortes (Peso: 15% do total): Avalie a relev√¢ncia dos pontos fortes (ou alinhamentos) para a vaga.
5. Pontos Fracos (Desconto de at√© 10%): Avalie a gravidade dos pontos fracos (ou desalinhamentos) para a vaga.
"""

prompt_template = ChatPromptTemplate.from_template("""
Voc√™ √© um especialista em Recursos Humanos com vasta experi√™ncia em an√°lise de curr√≠culos.
Sua tarefa √© analisar o conte√∫do a seguir e extrair os dados conforme o formato abaixo, para cada um dos campos.
Responda apenas com o JSON estruturado e utilize somente essas chaves. Cuide para que os nomes das chaves sejam exatamente esses.
N√£o adicione explica√ß√µes ou anota√ß√µes fora do JSON.
Schema desejado:
{schema}
---
Para o c√°lculo do campo score:
{prompt_score}
---
Curr√≠culo a ser analisado:
'{cv}'
---
Vaga que o candidato est√° se candidatando:
'{job}'
""")

# ‚úÖ SOLU√á√ÉO 3: Estados aprimorados para reset autom√°tico
if "uploader_key" not in st.session_state:
    st.session_state.uploader_key = str(uuid.uuid4())
if "processing_complete" not in st.session_state:
    st.session_state.processing_complete = False
if "last_processed_file" not in st.session_state:
    st.session_state.last_processed_file = None
if "selected_cv" not in st.session_state:
    st.session_state.selected_cv = None
if "structured_data" not in st.session_state:
    st.session_state.structured_data = None

# Salva descri√ß√£o da vaga em um .csv
save_job_to_csv(job, path_job_csv)
job_details = load_job(path_job_csv)

# ‚úÖ Layout aprimorado com bot√£o de reset
col1, col2 = st.columns(2)

with col1:
    st.header("Triagem e An√°lise de Curr√≠culos")
    st.markdown("#### Vaga: {}".format(job["title"]))

with col2:
    # Bot√£o de reset manual
    col_upload, col_reset = st.columns([4, 1])
    
    with col_reset:
        if st.button("üîÑ", help="Resetar upload"):
            st.session_state.uploader_key = str(uuid.uuid4())
            st.session_state.processing_complete = False
            st.session_state.last_processed_file = None
            st.session_state.structured_data = None
            st.rerun()
    
    with col_upload:
        uploaded_file = st.file_uploader(
            "Envie um curr√≠culo em PDF", 
            type=["pdf"], 
            key=st.session_state.uploader_key
        )

# ‚úÖ Processamento com reset autom√°tico
if uploaded_file is not None:
    # Verificar se √© um novo arquivo ou reprocessamento
    if st.session_state.last_processed_file != uploaded_file.name:
        
        with st.spinner("Analisando o curr√≠culo..."):
            path = uploaded_file.name
            with open(path, "wb") as f:
                f.write(uploaded_file.read())
            
            try:
                output, res = process_cv(schema, job_details, prompt_template, prompt_score, llm, path)
                structured_data = parse_res_llm(res, fields)
                save_json_cv(structured_data, path_json=json_file, key_name="name")
                
                # Marcar como processado
                st.session_state.last_processed_file = uploaded_file.name
                st.session_state.processing_complete = True
                st.session_state.structured_data = structured_data
                
                # Limpar arquivo tempor√°rio
                if os.path.exists(path):
                    os.remove(path)
                
                st.success("‚úÖ Curr√≠culo analisado com sucesso!")
                
                # Aguardar um pouco antes do reset autom√°tico
                time.sleep(0.5)
                
                # Reset autom√°tico do uploader
                st.session_state.uploader_key = str(uuid.uuid4())
                st.rerun()
                
            except Exception as e:
                st.error(f"‚ùå Erro ao processar: {str(e)}")
                # Reset em caso de erro
                st.session_state.uploader_key = str(uuid.uuid4())
                st.session_state.processing_complete = False

# ‚úÖ Mostrar resultados se dispon√≠veis
if st.session_state.processing_complete and st.session_state.structured_data:
    
    # Bot√£o para analisar outro curr√≠culo
    if st.button("üì§ Analisar Outro Curr√≠culo", type="primary"):
        st.session_state.uploader_key = str(uuid.uuid4())
        st.session_state.processing_complete = False
        st.session_state.last_processed_file = None
        st.session_state.structured_data = None
        st.rerun()
    
    st.write(show_cv_result(st.session_state.structured_data))
    
    with st.expander("Ver dados estruturados (JSON)"):
        st.json(st.session_state.structured_data)

# Lista de curr√≠culos analisados
if os.path.exists(json_file):
    st.subheader("Lista de curr√≠culos analisados", divider="gray")
    df = display_json_table(json_file)
    
    for i, row in df.iterrows():
        cols = st.columns([1, 3, 1, 5])
        with cols[0]:
            if st.button("Ver detalhes", key=f"btn_{i}"):
                st.session_state.selected_cv = row.to_dict()
        with cols[1]:
            st.write(f"**Nome:** {row.get('name', '-')}")
        with cols[2]:
            st.write(f"**Score:** {row.get('score', '-')}")
        with cols[3]:
            st.write(f"**Resumo:** {row.get('summary', '-')}")

# Mostrar detalhes do curr√≠culo selecionado
if st.session_state.selected_cv:
    st.markdown("-----")
    st.write(show_cv_result(st.session_state.selected_cv))
    with st.expander("Ver dados estruturados (JSON)"):
        st.json(st.session_state.selected_cv)

# Download e visualiza√ß√£o dos dados
if os.path.exists(json_file):
    with open(json_file, "r", encoding="utf-8") as f:
        json_data = f.read()
    
    st.download_button(
        label="üì• Baixar arquivo .json",
        data=json_data,
        file_name=json_file,
        mime="application/json"
    )
    
    df = display_json_table(json_file)
    st.dataframe(df)
