import streamlit as st
import uuid
from utils import *
from dotenv import load_dotenv
import os
import tempfile
from datetime import datetime

# Carrega vari√°veis de ambiente
load_dotenv()

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Sistema de Triagem de Curr√≠culos - Cal√ßados Beira Rio", 
    page_icon="üëî", 
    layout="wide",
    initial_sidebar_state="collapsed"
)

# CSS customizado para melhor apar√™ncia
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #1f4e79 0%, #2e5984 100%);
        padding: 1rem;
        border-radius: 10px;
        margin-bottom: 2rem;
    }
    
    .main-header h1 {
        color: white !important;
        margin: 0;
        text-align: center;
    }
    
    .metric-card {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #1f4e79;
        margin: 0.5rem 0;
    }
    
    .cv-card {
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 1rem;
        margin: 0.5rem 0;
        background: #fafafa;
    }
    
    .score-excellent { color: #28a745; font-weight: bold; }
    .score-good { color: #ffc107; font-weight: bold; }
    .score-average { color: #fd7e14; font-weight: bold; }
    .score-poor { color: #dc3545; font-weight: bold; }
</style>
""", unsafe_allow_html=True)

# Header principal
st.markdown("""
<div class="main-header">
    <h1>üëî Sistema de Triagem e An√°lise de Curr√≠culos</h1>
    <p style="color: white; text-align: center; margin: 0;">Cal√ßados Beira Rio S.A. | Powered by AI</p>
</div>
""", unsafe_allow_html=True)

# Verifica√ß√£o da chave API
if not os.getenv("GROQ_API_KEY"):
    st.error("‚ùå **Configura√ß√£o necess√°ria:** GROQ_API_KEY n√£o encontrada!")
    st.info("""
    **Para configurar:**
    1. Acesse as configura√ß√µes do Streamlit Cloud
    2. V√° em **Settings** ‚Üí **Secrets** 
    3. Adicione: `GROQ_API_KEY = "sua_chave_api_aqui"`
    4. Reinicie a aplica√ß√£o
    """)
    st.stop()

# Configura√ß√µes da aplica√ß√£o
CONFIG = {
    "model": "deepseek-r1-distill-llama-70b",
    "temperature": 0.7,
    "json_file": "curriculos_beira_rio.json",
    "job_csv": "vaga_atual.csv",
    "max_file_size": 10 * 1024 * 1024  # 10MB
}

# Cache do modelo para otimizar performance
@st.cache_resource
def initialize_llm():
    """Inicializa o modelo LLM com cache"""
    return load_llm(CONFIG["model"], CONFIG["temperature"])

# Inicializa√ß√£o do modelo
try:
    with st.spinner("üîÑ Inicializando sistema de IA..."):
        llm = initialize_llm()
    st.success("‚úÖ Sistema inicializado com sucesso!")
except Exception as e:
    st.error(f"‚ùå Erro na inicializa√ß√£o: {str(e)}")
    st.stop()

# Defini√ß√£o da vaga (adaptada para Cal√ßados Beira Rio)
vaga_beira_rio = {
    'title': "Desenvolvedor(a) Full Stack S√™nior - Cal√ßados Beira Rio",
    'description': """
    A Cal√ßados Beira Rio, l√≠der no mercado cal√ßadista brasileiro, busca um(a) Desenvolvedor(a) Full Stack 
    S√™nior para integrar nosso time de tecnologia. O profissional ser√° respons√°vel por desenvolver e manter 
    sistemas cr√≠ticos que suportam nossas opera√ß√µes em mais de 97 pa√≠ses, seguindo nossos rigorosos padr√µes 
    de desenvolvimento e qualidade.
    """,
    'details': """
**RESPONSABILIDADES:**
‚Ä¢ Desenvolver e manter aplica√ß√µes web seguindo padr√µes internos (Padronizacao_Desenvolvimento.md)
‚Ä¢ Implementar solu√ß√µes em ambiente Oracle Database com PL/SQL
‚Ä¢ Seguir nomenclatura padr√£o: FCT_ (fun√ß√µes), PRC_ (procedures), PCK_ (packages)
‚Ä¢ Criar e manter Forms e Reports seguindo templates corporativos
‚Ä¢ Participar de code reviews e documenta√ß√£o t√©cnica
‚Ä¢ Colaborar em projetos de integra√ß√£o com sistemas ERP
‚Ä¢ Desenvolver dashboards e relat√≥rios para gest√£o

**REQUISITOS OBRIGAT√ìRIOS:**
‚Ä¢ 5+ anos de experi√™ncia em desenvolvimento Full Stack
‚Ä¢ Dom√≠nio avan√ßado em PL/SQL e Oracle Database
‚Ä¢ Experi√™ncia com Oracle Forms e Reports
‚Ä¢ Conhecimento s√≥lido em JavaScript, HTML5, CSS3
‚Ä¢ Experi√™ncia com versionamento Git
‚Ä¢ Capacidade de seguir padr√µes rigorosos de desenvolvimento
‚Ä¢ Ingl√™s t√©cnico para leitura

**REQUISITOS DESEJ√ÅVEIS:**
‚Ä¢ Experi√™ncia em sistemas ERP (especialmente cal√ßadista)
‚Ä¢ Conhecimento em Power BI ou ferramentas BI
‚Ä¢ Certifica√ß√µes Oracle
‚Ä¢ Experi√™ncia com metodologias √°geis
‚Ä¢ Conhecimento em AWS ou Google Cloud Platform
‚Ä¢ Gradua√ß√£o em √°reas correlatas

**DIFERENCIAIS:**
‚Ä¢ Experi√™ncia no setor cal√ßadista ou varejo
‚Ä¢ Projetos de integra√ß√£o complexos
‚Ä¢ Lideran√ßa de equipes t√©cnicas
‚Ä¢ Contribui√ß√µes em projetos open source
‚Ä¢ Conhecimento em automa√ß√£o de testes

**OFERECEMOS:**
‚Ä¢ Sal√°rio compat√≠vel com o mercado + benef√≠cios
‚Ä¢ Plano de sa√∫de e odontol√≥gico
‚Ä¢ Vale-refei√ß√£o e vale-transporte
‚Ä¢ Participa√ß√£o nos lucros e resultados
‚Ä¢ Oportunidades de crescimento em empresa global
‚Ä¢ Ambiente de trabalho inovador e sustent√°vel
    """
}

# Schema de dados estruturados para an√°lise
schema_cv = """
{
  "name": "Nome completo do candidato",
  "area": "√Årea principal de atua√ß√£o (Desenvolvimento, TI, Outros)",
  "summary": "Resumo objetivo do perfil profissional",
  "skills": ["lista de compet√™ncias t√©cnicas relevantes"],
  "education": "Resumo da forma√ß√£o acad√™mica mais relevante",
  "experience_years": "N√∫mero estimado de anos de experi√™ncia",
  "interview_questions": ["3 a 5 perguntas espec√≠ficas para entrevista"],
  "strengths": ["pontos fortes alinhados com a vaga"],
  "areas_for_development": ["lacunas ou pontos de aten√ß√£o"],
  "important_considerations": ["observa√ß√µes que merecem verifica√ß√£o"],
  "final_recommendations": "Avalia√ß√£o final e pr√≥ximos passos sugeridos",
  "score": 0.0
}
"""

# Campos obrigat√≥rios para valida√ß√£o
required_fields = [
    "name", "area", "summary", "skills", "education", "experience_years",
    "interview_questions", "strengths", "areas_for_development", 
    "important_considerations", "final_recommendations", "score"
]

# Instru√ß√µes detalhadas para pontua√ß√£o
scoring_instructions = """
CRIT√âRIOS DE PONTUA√á√ÉO (0.0 a 10.0):

1. **EXPERI√äNCIA T√âCNICA (Peso: 40%)**
   - Anos de experi√™ncia em desenvolvimento
   - Experi√™ncia com Oracle/PL-SQL (fundamental)
   - Conhecimento em Forms/Reports
   - Projetos similares ao ambiente corporativo

2. **HABILIDADES T√âCNICAS (Peso: 25%)**
   - Linguagens de programa√ß√£o relevantes
   - Banco de dados Oracle
   - Ferramentas de desenvolvimento web
   - Conhecimento em metodologias √°geis

3. **FORMA√á√ÉO E CERTIFICA√á√ïES (Peso: 15%)**
   - Gradua√ß√£o em √°reas correlatas
   - Certifica√ß√µes t√©cnicas (especialmente Oracle)
   - Cursos de especializa√ß√£o relevantes

4. **ALINHAMENTO CULTURAL (Peso: 10%)**
   - Experi√™ncia em ambientes corporativos
   - Capacidade de seguir padr√µes rigorosos
   - Trabalho em equipe e comunica√ß√£o

5. **DIFERENCIAIS (Peso: 10%)**
   - Experi√™ncia no setor cal√ßadista/varejo
   - Lideran√ßa t√©cnica
   - Projetos de integra√ß√£o complexos
   - Ingl√™s t√©cnico

**ESCALA DE PONTUA√á√ÉO:**
- 9.0-10.0: Candidato excepcional, supera expectativas
- 7.0-8.9: Candidato muito qualificado, alta ader√™ncia
- 5.0-6.9: Candidato qualificado, boa ader√™ncia
- 3.0-4.9: Candidato com potencial, necessita desenvolvimento
- 0.0-2.9: Candidato inadequado para a posi√ß√£o

SEJA RIGOROSO E JUSTO. Note 10.0 apenas para candidatos extraordin√°rios.
"""

# Template do prompt para an√°lise
prompt_template = ChatPromptTemplate.from_template("""
Voc√™ √© um especialista em Recursos Humanos da Cal√ßados Beira Rio S.A., empresa l√≠der no setor cal√ßadista brasileiro.

Sua tarefa √© analisar o curr√≠culo a seguir e extrair informa√ß√µes estruturadas conforme o schema JSON especificado.

IMPORTANTE:
- Retorne APENAS o JSON estruturado, sem explica√ß√µes adicionais
- Use exatamente as chaves especificadas no schema
- Seja preciso e detalhado na an√°lise
- Considere o contexto da empresa e da vaga espec√≠fica

SCHEMA ESPERADO:
{schema}

INSTRU√á√ïES PARA PONTUA√á√ÉO:
{prompt_score}

DETALHES DA VAGA:
{job}

CURR√çCULO PARA AN√ÅLISE:
{cv}

Retorne apenas o JSON estruturado:
""")

# Estados da sess√£o
if "uploader_key" not in st.session_state:
    st.session_state.uploader_key = str(uuid.uuid4())
if "selected_cv" not in st.session_state:
    st.session_state.selected_cv = None
if "analysis_history" not in st.session_state:
    st.session_state.analysis_history = []

# Salva informa√ß√µes da vaga
save_job_to_csv(vaga_beira_rio, CONFIG["job_csv"])
job_details = load_job(CONFIG["job_csv"])

# Layout principal em duas colunas
col_left, col_right = st.columns([2, 1])

with col_left:
    st.subheader("üìÑ An√°lise de Curr√≠culo")
    
    # Informa√ß√µes da vaga
    with st.expander("üíº Detalhes da Vaga", expanded=False):
        st.markdown(f"**{vaga_beira_rio['title']}**")
        st.write(vaga_beira_rio['description'])
        
        st.markdown("**Principais Requisitos:**")
        st.markdown("""
        ‚Ä¢ 5+ anos em desenvolvimento Full Stack
        ‚Ä¢ Oracle Database e PL/SQL avan√ßado
        ‚Ä¢ Oracle Forms e Reports
        ‚Ä¢ JavaScript, HTML5, CSS3
        ‚Ä¢ Git e metodologias √°geis
        """)

with col_right:
    st.subheader("üì§ Upload de Curr√≠culo")
    
    # Upload de arquivo
    uploaded_file = st.file_uploader(
        "Selecione um arquivo PDF", 
        type=["pdf"], 
        key=st.session_state.uploader_key,
        help="Tamanho m√°ximo: 10MB | Apenas arquivos PDF"
    )
    
    if st.button("üîÑ Limpar Upload"):
        st.session_state.uploader_key = str(uuid.uuid4())
        st.rerun()

# Processamento do arquivo enviado
if uploaded_file is not None:
    file_size = len(uploaded_file.read())
    uploaded_file.seek(0)  # Reset do ponteiro do arquivo
    
    if file_size > CONFIG["max_file_size"]:
        st.error(f"‚ùå Arquivo muito grande ({file_size/1024/1024:.1f}MB). M√°ximo permitido: 10MB")
    else:
        try:
            # Cria arquivo tempor√°rio seguro
            with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp_file:
                tmp_file.write(uploaded_file.read())
                temp_path = tmp_file.name
            
            # Interface de progresso
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            status_text.text("üîÑ Extraindo texto do documento...")
            progress_bar.progress(25)
            
            # Processa o CV
            with st.spinner("ü§ñ Analisando curr√≠culo com IA... Isso pode levar 1-2 minutos."):
                status_text.text("ü§ñ Enviando para an√°lise de IA...")
                progress_bar.progress(50)
                
                output, response = process_cv(
                    schema_cv, 
                    job_details, 
                    prompt_template, 
                    scoring_instructions, 
                    llm, 
                    temp_path
                )
                
                progress_bar.progress(75)
                status_text.text("üìä Processando resultados...")
                
                if output and response:
                    # Extrai dados estruturados
                    cv_data = parse_res_llm(response, required_fields)
                    
                    if validate_cv_data(cv_data):
                        # Salva os dados
                        if save_json_cv(cv_data, CONFIG["json_file"], "name"):
                            progress_bar.progress(100)
                            status_text.text("‚úÖ An√°lise conclu√≠da com sucesso!")
                            
                            # Atualiza interface
                            st.session_state.uploader_key = str(uuid.uuid4())
                            st.session_state.analysis_history.append({
                                "timestamp": datetime.now(),
                                "filename": uploaded_file.name,
                                "candidate": cv_data.get("name", "N/A"),
                                "score": cv_data.get("score", 0)
                            })
                            
                            # Exibe resultados
                            st.success("üéâ Curr√≠culo analisado e salvo com sucesso!")
                            
                            # M√©tricas r√°pidas
                            col1, col2, col3 = st.columns(3)
                            with col1:
                                st.metric("üë§ Candidato", cv_data.get("name", "N/A"))
                            with col2:
                                score = float(cv_data.get("score", 0))
                                st.metric("üìä Pontua√ß√£o", f"{score}/10")
                            with col3:
                                st.metric("üíº √Årea", cv_data.get("area", "N/A"))
                            
                            st.markdown("---")
                            st.markdown(show_cv_result(cv_data))
                            
                            # Dados estruturados (expand√≠vel)
                            with st.expander("üîç Ver Dados Estruturados (JSON)"):
                                st.json(cv_data)
                                
                        else:
                            st.error("‚ùå Erro ao salvar os dados do curr√≠culo.")
                    else:
                        st.error("‚ùå Dados extra√≠dos s√£o inv√°lidos. Tente novamente.")
                else:
                    st.error("‚ùå Falha na an√°lise. Verifique se o arquivo √© um PDF v√°lido.")
            
            # Remove arquivo tempor√°rio
            try:
                os.unlink(temp_path)
            except:
                pass
                
            # Limpa indicadores de progresso
            progress_bar.empty()
            status_text.empty()
            
        except Exception as e:
            st.error(f"‚ùå Erro no processamento: {str(e)}")
            if "rate limit" in str(e).lower():
                st.info("‚è≥ Limite de requisi√ß√µes atingido. Aguarde alguns minutos e tente novamente.")
            elif "timeout" in str(e).lower():
                st.info("‚è≥ Timeout na an√°lise. O documento pode ser muito complexo.")

# Se√ß√£o de curr√≠culos analisados
st.markdown("---")
st.header("üìã Curr√≠culos Analisados")

if os.path.exists(CONFIG["json_file"]):
    df = display_json_table(CONFIG["json_file"])
    
    if not df.empty:
        # Estat√≠sticas r√°pidas
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("üìä Total Analisados", len(df))
        
        with col2:
            avg_score = df['score'].mean() if 'score' in df.columns else 0
            st.metric("üìà Pontua√ß√£o M√©dia", f"{avg_score:.1f}")
        
        with col3:
            excellent_count = len(df[df['score'] >= 8]) if 'score' in df.columns else 0
            st.metric("üåü Candidatos Excelentes", excellent_count)
        
        with col4:
            qualified_count = len(df[df['score'] >= 6]) if 'score' in df.columns else 0
            st.metric("‚úÖ Candidatos Qualificados", qualified_count)
        
        st.markdown("---")
        
        # Filtros
        col_filter1, col_filter2 = st.columns(2)
        
        with col_filter1:
            min_score = st.slider("Pontua√ß√£o m√≠nima", 0.0, 10.0, 0.0, 0.1)
        
        with col_filter2:
            if 'area' in df.columns:
                areas = df['area'].unique().tolist()
                selected_area = st.selectbox("Filtrar por √°rea", ["Todas"] + areas)
            else:
                selected_area = "Todas"
        
        # Aplica filtros
        filtered_df = df.copy()
        if 'score' in filtered_df.columns:
            filtered_df = filtered_df[filtered_df['score'] >= min_score]
        if selected_area != "Todas" and 'area' in filtered_df.columns:
            filtered_df = filtered_df[filtered_df['area'] == selected_area]
        
        # Ordena por pontua√ß√£o
        if 'score' in filtered_df.columns:
            filtered_df = filtered_df.sort_values('score', ascending=False)
        
        # Lista de candidatos
        st.subheader(f"üë• Lista de Candidatos ({len(filtered_df)} encontrados)")
        
        for idx, row in filtered_df.iterrows():
            with st.container():
                cols = st.columns([1, 3, 1, 1, 3, 1])
                
                with cols[0]:
                    if st.button("üëÅÔ∏è", key=f"view_{idx}", help="Ver detalhes"):
                        st.session_state.selected_cv = row.to_dict()
                
                with cols[1]:
                    st.markdown(f"**{row.get('name', 'N/A')}**")
                
                with cols[2]:
                    score = row.get('score', 0)
                    if score >= 8:
                        st.markdown(f'<span class="score-excellent">üü¢ {score}</span>', unsafe_allow_html=True)
                    elif score >= 6:
                        st.markdown(f'<span class="score-good">üü° {score}</span>', unsafe_allow_html=True)
                    elif score >= 4:
                        st.markdown(f'<span class="score-average">üü† {score}</span>', unsafe_allow_html=True)
                    else:
                        st.markdown(f'<span class="score-poor">üî¥ {score}</span>', unsafe_allow_html=True)
                
                with cols[3]:
                    st.write(f"*{row.get('area', 'N/A')}*")
                
                with cols[4]:
                    experience = row.get('experience_years', 'N/A')
                    summary = str(row.get('summary', ''))
                    preview = summary[:80] + "..." if len(summary) > 80 else summary
                    st.write(f"{experience} anos | {preview}")
                
                with cols[5]:
                    timestamp = row.get('analyzed_at', 'N/A')
                    if timestamp != 'N/A':
                        try:
                            dt = datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S")
                            st.write(dt.strftime("%d/%m %H:%M"))
                        except:
                            st.write("N/A")
                    else:
                        st.write("N/A")
                
                st.markdown("---")
        
        # Exibe detalhes do CV selecionado
        if st.session_state.selected_cv:
            st.markdown("## üîç Detalhes do Candidato Selecionado")
            st.markdown(show_cv_result(st.session_state.selected_cv))
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("‚ùå Fechar Detalhes"):
                    st.session_state.selected_cv = None
                    st.rerun()
            
            with col2:
                with st.expander("üìÑ Dados Estruturados"):
                    st.json(st.session_state.selected_cv)
        
        # Op√ß√µes de download
        st.markdown("---")
        st.subheader("üì• Downloads")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Download JSON
            with open(CONFIG["json_file"], "r", encoding="utf-8") as f:
                json_data = f.read()
            
            st.download_button(
                label="üìÑ Baixar dados completos (JSON)",
                data=json_data,
                file_name=f"curriculos_beira_rio_{datetime.now().strftime('%Y%m%d')}.json",
                mime="application/json"
            )
        
        with col2:
            # Download CSV
            csv_data = filtered_df.to_csv(index=False, encoding='utf-8')
            st.download_button(
                label="üìä Baixar lista filtrada (CSV)",
                data=csv_data,
                file_name=f"lista_candidatos_{datetime.now().strftime('%Y%m%d')}.csv",
                mime="text/csv"
            )
        
        # Tabela completa (expand√≠vel)
        with st.expander("üìä Visualizar Tabela Completa"):
            st.dataframe(
                filtered_df,
                use_container_width=True,
                hide_index=True
            )
    
    else:
        st.info("üìù Nenhum curr√≠culo foi analisado ainda. Fa√ßa o upload do primeiro arquivo!")

else:
    st.info("üìÇ Nenhum dado encontrado. Comece analisando o primeiro curr√≠culo!")

# Footer
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #666; font-size: 0.8em; margin-top: 2rem;">
    <p>üíº Sistema de Triagem de Curr√≠culos | Cal√ßados Beira Rio S.A.</p>
    <p>Desenvolvido com Streamlit + IA | Vers√£o 1.0 | 2024</p>
</div>
""", unsafe_allow_html=True)

# Limpeza peri√≥dica (executar silenciosamente)
try:
    clean_old_files()
except:
    pass